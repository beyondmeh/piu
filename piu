#!/bin/bash

#Cross-platform package manager wrapper
#https://github.com/beyondmeh/piu
#Copyright (c) 2017-2023 BeyondMeh
#Licensed under the ISC license.

__piutmp() {
	# Piu Temp Directory Manager
	case ${1} in
		[sS][tT][aA][rR][tT])
			[[ -d "/tmp/${0}" ]] || mkdir -p "/tmp/${0}" 2> /dev/null 
		;;
		[sS][tT][oO][pP])
			[[ -d "/tmp/${0}" ]] && rm -rf "/tmp/${0}" 2> /dev/null
		;;
		[rR][eE][sS][tT][aA][rR][tT])
			[[ -d "/tmp/${0}" ]] && { rm -rf "/tmp/${0}" 2> /dev/null && mkdir -p "/tmp/${0}" 2> /dev/null ; } 
		;;
	esac
}

__piuplm () {
	# Piu PID Lock Manager
	case ${1} in
		[sS][tT][aA][rR][tT])
			__piutmp start
			echo "piu_pid='${BASHPID}'" > "/tmp/${0}/piu.pid"
		;;
		[sS][tT][oO][pP])
			__piutmp stop
		;;
		[rR][eE][sS][tT][aA][rR][tT])
			__piutmp restart
		;;
	esac
}

bye() {
	__piuplm stop
	exit
}

if [[ -f "/tmp/${0}/piu.pid" ]] ; then
	. "/tmp/${0}/piu.pid"
	echo -e "$(basename ${0}) says: i'm already running on another proccess (${piu_pid}).\nIf you think this is a mistake you can delete my lock file:\n/tmp/${0}/piu.pid"
	exit 1
else
	__piuplm start
fi

trap bye INT

UPDATE_AFTER=43200 # 12 hours

usage() {
cat <<HELP
Cross-platform package manager wrapper

usage: $(basename "$0") OPTION [--cask] [PACKAGE]

   SINGLE PACKAGE ACTIONS
   (i)nstall : install a given package
   (r)emove  : remove a given package
   (p)urge   : remove a given package and any related config files
   (s)earch  : search for a package
   (m)anual  : install a locally downloaded package (e.g.: a .deb file)
   (f)iles   : list files provided by a given package

   UPDATING
   (u)pdate  : update all installed packages
   (c)ache   : update the package cache / repository

               NOTE: update, install, and num-updates will automatically
               update the cache if it is old

   MISC
   (l)ist            : list installed packages
   (nu) num-updates  : number of packages with updates
   (np) num-packages : number of installed packages

https://github.com/beyondmeh/piu

Copyright (c) 2017-2023 BeyondMeh
Licensed under the ISC license.
HELP
}

# Utils
########################################################################
not_implemented() { echo "'${FUNCNAME[1]}' not implemented yet!" && exit 1; }

# Distro Specific
########################################################################
#
# Alpine Linux
#
# WONTFIX:
# piu depends on bash, which isn't in the base install of Alpine.
# Without it, the following error occurs: "-ash: piu: not found"
apk_install() { sudo apk add "$@"; }
apk_update()  { sudo apk upgrade; }
apk_remove()  { sudo apk del "$@"; }
apk_purge()   { sudo apk del "$@" && sudo apk cache clean; }
apk_search()  { apk search -v "$@"; }
apk_list()    { apk info; }
apk_list_files() {
	# WONTFIX:
	# It seems that file content listings are optional with apks, such as
	# with `joe` and`nano`; apk will fail silently with $? as a success.
	apk info -L "$@"
}
apk_manual()  { sudo apk add --allow-untrusted "$@"; }
apk_repo_age() { find /var/cache/apk -type f -print0 | xargs -0 stat -c %Z | sort | tail -1; }
apk_repo_update() {
	if ! sudo -n apk update &> /dev/null; then
		echo "out-of-date"
		exit 1
	fi
}
apk_num_updates() { echo "not implemented yet!" && exit 1; }
apk_num_pkgs() { apk list | wc -l; }
#
# Arch Linux
#
pacman_install() { sudo pacman -S "$@"; }
pacman_update()  { sudo pacman -Su; }
pacman_remove()  { sudo pacman -Rs "$@"; }
pacman_purge()   { sudo pacman -Rns "$@"; }
pacman_search()  { pacman -Ss "$@"; }
pacman_list()    { pacman -Qqe; }
pacman_list_files() {
	# HELPWANTED:
	# The below code will fail on similar named packages
	# like chromium and chromium-bsu. The problem is two-fold
	#
	# 1. pacman searching needs to use ^PACKAGE$ to match
	# exact names. `pacman -Qs $$@^` doesn't work, but how to
	# properly escape is beyond me.
	#
	# 2. Output from `pacman -Sw` should be captured to get the
	# exact filename of the package. Calling `ls` is sloppy

	if ! pacman -Qs "$@" >/dev/null; then
		sudo pacman -Sw --noconfirm "$@"
		pacman -Qlp $(ls /var/cache/pacman/pkg/$@*)
	else
		pacman -Ql "$@"
	fi
}
pacman_manual()  { sudo pacman -U "$@"; }
pacman_repo_age() { stat -c '%Y' '/var/cache/pacman/pkg'; }
pacman_repo_update() {
	if ! sudo -n pacman -Sy &> /dev/null; then
		echo "out-of-date"
		exit 1
	fi
}
pacman_num_updates() { pacman -Qu | wc -l; }
pacman_num_pkgs() { pacman_list | wc -l; }
#
# Void Linux
#
xbps_install() { sudo xbps-install "$@"; }
xbps_update()  { sudo xbps-install -Su; }
xbps_remove()  { sudo xbps-remove -R "$@"; }
xbps_purge()   { sudo xbps-remove -R "$@" && sudo xbps-remove -Oo; }
xbps_search()  { xbps-query -Rs "$@"; }
xbps_list()    { xbps-query -l; }
xbps_list_files() { xbps-query -Rf "$@"; }
xbps_manual()  {
	xbps-rindex -a *.xbps
	xbps-install --repository=$PWD "$@"
}
xbps_repo_age() { stat -c '%Y' '/var/db/xbps/https___alpha_de_repo_voidlinux_org_current'; }
xbps_repo_update() {
	if ! sudo -n xbps-install -S &> /dev/null; then
		echo "out-of-date"
		exit 1
	fi
}
xbps_num_updates() { xbps-install -nu | wc -l; }
xbps_num_pkgs() { xbps-query -l | wc -l; }
#
# Debian / Ubuntu
#
apt_install() { sudo apt install "$@"; }
apt_update()  { sudo apt upgrade; }
apt_remove()  { sudo apt remove "$@"; }
apt_purge()   { sudo apt purge "$@"; }
apt_search()  { apt search "$@"; }
apt_list()    { dpkg-query -f '${binary:Package}\n' -W; }
apt_list_files() {
	if ! apt list --installed 2>/dev/null | grep -q "$@"; then
		# using apt-get prevents dependencies from downloading
		# and doesn't need sudo
		DIR=$(mktemp -d)
		(cd $DIR && apt-get download "$@" > /dev/null 2>&1)
		dpkg -c $DIR/*.deb
	else
		dpkg -L "$@"
	fi
}
apt_manual()  { sudo dpkg -i "$@"; }
apt_repo_age() { stat -c '%Y' '/var/cache/apt/pkgcache.bin'; }
apt_repo_update() {
	if ! sudo -n apt update &> /dev/null; then
		echo 'out-of-date'
		exit 1
	fi
}
apt_num_updates() { apt list --upgradeable 2>/dev/null | tail -n +2 | wc -l; }
apt_num_pkgs() { apt_list | wc -l; }
#
# Red Hat / Fedora
#
dnf_install() { sudo dnf install "$@"; }
dnf_update()  { sudo dnf upgrade; }
dnf_remove()  { sudo dnf remove -C "$@"; }
dnf_purge()   {
    # yum / dnf remove works just like apt's purge
    # https://unix.stackexchange.com/questions/8191/what-is-fedoras-equivalent-of-apt-get-purge/8193
    sudo dnf remove "$@"
}
dnf_search()  { dnf search -C "$@"; }
dnf_list()    { dnf list installed -C | awk '{if(NR>1)print $1}'; }
dnf_list_files() { dnf -C repoquery -l "$@"; }
dnf_manual()  { sudo dnf localinstall "$@"; }
dnf_repo_age() { stat -c '%Y' '/var/cache/dnf/packages.db'; }
dnf_repo_update() {
	if ! dnf clean metadata && dnf check-update &> /dev/null; then
		echo 'out-of-date'
		exit 1
	fi
}
dnf_num_updates() { dnf check-update | awk '{if(NR>2)print $1}' | wc -l; }
dnf_num_pkgs() { dnf_list | wc -l; }
#
# openSUSE
#
zypper_install() { sudo zypper in "$@"; }
zypper_update()  { sudo zypper up; }
zypper_remove()  { sudo zypper rm -C "$@"; }
zypper_purge()   { sudo zypper rm -u "$@"; }
zypper_search()  { zypper search "$@"; }
zypper_list()    { zypper search -i | grep ^i | awk '{print $3}'; }
zypper_list_files() { dnf -C repoquery -l "$@"; }
zypper_manual()  { sudo zypper in "$@"; }
zypper_repo_age() { stat -c '%Y' '/var/cache/zypp/raw/repo-oss/repodata/repomd.xml'; }
zypper_repo_update() {
	if ! sudo zypper ref &> /dev/null; then
		echo 'out-of-date'
		exit 1
	fi
}
zypper_num_updates() { zypper lu | grep ^v | wc -l; }
zyyper_num_pkgs() { zypper_list | wc -l; }
#
# macOS
#
brew_install() {
	# drop -y or --yes flags as they are unsupported on brew
	brew_install_args=$(echo "$@" | sed -e 's/-y//' -e 's/--yes//')
	brew $BREW_CASK install $brew_install_args;
}
brew_update()  { brew $BREW_CASK upgrade; }
brew_remove()  { brew $BREW_CASK uninstall "$@"; }
brew_search()  { brew $BREW_CASK search "$@"; }
brew_list()    { brew $BREW_CASK list; }
brew_manual()  { not_implemented; }
brew_purge()   { not_implemented; }
brew_list_files() { not_implemented; }
brew_repo_age() { date +%s; }
brew_repo_update() { brew update; }
brew_num_updates() { not_implemented; }
brew_num_pkgs() { brew_list | wc -l; }
is_darwin() { uname -a | grep Darwin > /dev/null; }

# Abstraction
########################################################################
repo_update_if_needed() {
	CURRENT_TIME=$(date '+%s')
	LAST_UPDATE=$(eval "${PKGMAN}"_repo_age)

	if ((CURRENT_TIME-LAST_UPDATE > UPDATE_AFTER)); then
		eval "${PKGMAN}"_repo_update
	fi
}

# Find the current distribution
if [ -f /etc/os-release ]; then
	if grep -q arch /etc/os-release; then
		PKGMAN='pacman'
	elif [[ -f /etc/debian_version ]]; then
		PKGMAN='apt'
	elif grep -q void /etc/os-release; then
		PKGMAN='xbps'
	elif grep -q alpine /etc/os-release; then
		PKGMAN='apk'
	elif grep -q fedora /etc/os-release; then
		PKGMAN='dnf'
	elif grep -q openSUSE /etc/os-release; then
		# openSUSE supports dnf, but the default is zypper
		if hash dnf 2>/dev/null; then
			PKGMAN='dnf'
		else
			PKGMAN='zypper'
		fi
	else
		echo "ERROR: I currently don't have support for your distro"
		exit 1
	fi
else
	if is_darwin; then
		PKGMAN='brew'
	else
		echo "Error: cannot detect platform"
		exit 1
	fi
fi

# find what we're doing
########################################################################
# make leading dashes optional, out of tradition
if is_darwin; then
  # Detect cask argument
  if [ "$1" == "cask" ]; then
    BREW_CASK="cask"
    shift 1
  fi

  action=$(echo "$1" | sed 's/^-*//g')
else
  action=$(echo "$1" | sed 's/^-*//g' --)
fi

case "$action" in
# search
	[sS]|[sS][eE][aA][rR][cC][hH])
		shift 1
		eval ${PKGMAN}_search "$@"
		bye
	;;
# remove
	[rR]|[rR][eE][mM][oO][vV][eE])
		shift 1
		eval ${PKGMAN}_remove "$@"
		bye
	;;
# purge
	[pP]|[pP][uU][rR][gG][eE])
		shift 1
		eval ${PKGMAN}_purge "$@"
		bye
	;;
# list
	[lL]|[lL][iI][sS][tT])
		eval ${PKGMAN}_list
		bye
	;;
# list files
	[fF]|[fF][iI][lL][eE][sS])
		shift 1
		eval ${PKGMAN}_list_files "$@"
		bye
	;;
# install
	[iI]|[iI][nN][sS][tT][aA][lL][lL])
		shift 1
		repo_update_if_needed
		eval ${PKGMAN}_install "$@"
		bye
	;;
# update
	[uU]|[uU][pP][dD][aA][tT][eE])
		repo_update_if_needed
		eval ${PKGMAN}_update
		bye
	;;
# num updates
	[nN][uU]|[nN][uU][mM]-[uU][pP][dD][aA][tT][eE][sS])
		eval ${PKGMAN}_num_updates
		bye
	;;
# num packages
	[nN][pP]|[nN][uU][mM]-[pP][aA][cC][kK][aA][gG][eE][sS])
		eval ${PKGMAN}_num_pkgs
		bye
	;;
# cache
	[cC]|[cC][aA][cC][hH][eE])
		eval ${PKGMAN}_repo_update
		bye
	;;
# manual
	[mM]|[mM][aA][nN][uU][aA][lL])
		shift 1
		eval ${PKGMAN}_manual "$@"
		bye
	;;

	*)
		usage
		bye
	;;
esac
